name: Deploy to OCI Docker Swarm

on:
  push:
    branches:
      - main

env:
# 이제 이 변수는 배포 단계에서만 사용합니다.
IMAGE_NAME: sys_express

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 1. (필수) insecure 옵션을 다시 켭니다. 프록시 없이 직접 통신하므로 HTTP를 사용해야 합니다.
      - name: Configure Docker for insecure registry
        run: |
          sudo mkdir -p /etc/docker
          echo '{"insecure-registries": ["${{ secrets.DOCKER_REGISTRY_HOST_AND_PORT }}"]}' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker

      - name: Set short git SHA
        run: echo "SHORT_SHA=${GITHUB_SHA::8}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 2. (수정) Caddy를 거치지 않고 레지스트리 서비스(5000번 포트)에 직접 로그인합니다.
      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY_HOST_AND_PORT }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3. (수정) Caddy를 거치지 않고 레지스트리 서비스에 직접 푸시합니다.
      - name: Build and push Docker image with shell commands
        run: |
          IMAGE_TAG="${{ secrets.DOCKER_REGISTRY_HOST_AND_PORT }}/${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA}}"
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG

      - name: Deploy to Swarm
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SWARM_MANAGER_HOST }}
          username: ${{ secrets.SWARM_MANAGER_USER }}
          key: ${{ secrets.SWARM_MANAGER_SSH_KEY }}
          script: |
            # 배포 시에는 Swarm 내부 네트워크 주소를 사용합니다. 이 부분은 원래대로 둡니다.
            IMAGE_TAG="${{ secrets.DOCKER_REGISTRY_INTERNAL_URL }}/${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA}}"
            docker service update --image $IMAGE_TAG sys_express
