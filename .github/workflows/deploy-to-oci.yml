name: Deploy to OCI Docker Swarm

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: sys_express
  # 레지스트리 주소를 변수로 만들어 재사용성을 높입니다.
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY_HOST_AND_PORT }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # -- 이 단계는 불안정하므로 완전히 제거합니다. --
      # - name: Configure Docker for insecure registry
      #   ...

      - name: Set short git SHA
        id: vars # 이후 단계에서 참조할 수 있도록 id를 부여합니다.
        run: echo "sha=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login, Build, Push 단계를 하나로 통합합니다.
      # docker/build-push-action이 내부적으로 로그인을 처리합니다.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          # insecure-registries를 사용해야 할 경우, buildx 설정에 추가하는 것을 고려해야 하지만
          # 가장 좋은 해결책은 Let's Encrypt 등을 이용해 레지스트리에 HTTPS를 적용하는 것입니다.
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.sha }}
          # Docker Hub가 아닌 사설 레지스트리에 로그인 정보를 전달합니다.
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Deploy to Swarm
        # master 대신 특정 버전을 사용합니다.
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SWARM_MANAGER_HOST }}
          username: ${{ secrets.SWARM_MANAGER_USER }}
          key: ${{ secrets.SWARM_MANAGER_SSH_KEY }}
          script: |
            # Swarm 노드는 내부망 주소로 이미지를 받아옵니다.
            IMAGE_TAG="${{ secrets.DOCKER_REGISTRY_INTERNAL_URL }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.sha }}"
            docker service update --image $IMAGE_TAG sys_express
