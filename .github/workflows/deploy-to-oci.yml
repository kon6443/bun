name: Deploy to OCI Docker Swarm

on:
  push:
    branches:
      - main

env:
  # 변수를 미리 정의하여 재사용성을 높입니다.
  IMAGE_NAME: sys_express
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY_HOST_AND_PORT }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: prod

    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 짧은 Git SHA 값을 환경 변수로 설정 (최신 권장 방식 사용)
      - name: Set short git SHA
        id: vars
        run: echo "sha=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

      # 3. Buildx가 HTTP 레지스트리를 사용하도록 설정 파일을 생성
      - name: Create buildkitd config for insecure registry
        run: |
          mkdir -p ./.tmp
          cat <<EOF > ./.tmp/buildkitd.toml
          [registry."${{ env.DOCKER_REGISTRY }}"]
            http = true
          EOF

      # 4. 위에서 생성한 설정 파일을 사용하여 Docker Buildx를 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          config: ./.tmp/buildkitd.toml

      # 5. 로그인, 빌드, 푸시를 단일 액션으로 통합하여 실행
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.sha }}
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 6. Swarm 매니저 노드에 SSH로 접속하여 서비스 업데이트 (안정적인 버전 사용)
      - name: Deploy to Swarm
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SWARM_MANAGER_HOST }}
          username: ${{ secrets.SWARM_MANAGER_USER }}
          key: ${{ secrets.SWARM_MANAGER_SSH_KEY }}
          script: |
            # Swarm 노드는 내부망 주소로 이미지를 받아오도록 설정합니다.
            IMAGE_TAG="${{ secrets.DOCKER_REGISTRY_INTERNAL_URL }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.sha }}"
            docker service update --image $IMAGE_TAG sys_express
